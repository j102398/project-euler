
def load_triangle() -> list[list[int]]:
    with open("0067_triangle.txt") as f:
        data = f.read()
    return [[int(word) for word in line.split()] for line in data.strip().split("\n")]

triangle = load_triangle()




#for example this small triangle
#   5
# 6   7
#6  7   8

#split the bottom two rows into two triangles:

# 6       and 7
#6 7         7  8
#max sum for LHS : 13
#max sum for RHS

#so original triangle becomes

# 5
#8 15


def maximum_path_triangle(triangle):


    for row_index in range(len(triangle)-1,0,-1): #iterating from the bottom of the triangle upwards
        for number_index in range(len(triangle[row_index-1])): #we are not including the last integer in the row, as it requires a number to its right
            triangle[row_index-1][number_index] += max(triangle[row_index][number_index],triangle[row_index][number_index+1]) #this is updating the parent node, and adding the sum of the bigger child

    return (triangle[0][0])


print(maximum_path_triangle(triangle))
