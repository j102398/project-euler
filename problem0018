triangle = [
  [75],
  [95, 64],
  [17, 47, 82],
  [18, 35, 87, 10],
  [20, 4, 82, 47, 65],
  [19, 1, 23, 75, 3, 34],
  [88, 2, 77, 73, 7, 63, 67],
  [99, 65, 4, 28, 6, 16, 70, 92],
  [41, 41, 26, 56, 83, 40, 80, 70, 33],
  [41, 48, 72, 33, 47, 32, 37, 16, 94, 29],
  [53, 71, 44, 65, 25, 43, 91, 52, 97, 51, 14],
  [70, 11, 33, 28, 77, 73, 17, 78, 39, 68, 17, 57],
  [91, 71, 52, 38, 17, 14, 91, 43, 58, 50, 27, 29, 48],
  [63, 66, 4, 68, 89, 53, 67, 30, 73, 16, 69, 87, 40, 31],
  [4, 62, 98, 27, 23, 9, 70, 98, 73, 93, 38, 53, 60, 4, 23],
]


#for example this small triangle
#   5
# 6   7
#6  7   8

#split the bottom two rows into two triangles:

# 6       and 7
#6 7         7  8
#max sum for LHS : 13
#max sum for RHS

#so original triangle becomes

# 5
#8 15


def maximum_path_triangle(triangle):


    for row_index in range(len(triangle)-1,0,-1): #iterating from the bottom of the triangle upwards
        for number_index in range(len(triangle[row_index-1])): #we are not including the last integer in the row, as it requires a number to its right
            triangle[row_index-1][number_index] += max(triangle[row_index][number_index],triangle[row_index][number_index+1]) #this is updating the parent node, and adding the sum of the bigger child

    return (triangle[0][0])


print(maximum_path_triangle(triangle))
