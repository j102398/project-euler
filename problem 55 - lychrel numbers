def palindrome_number(number):
    number_str = str(number)
    number_length = len(number_str)
    remainder = number_length % 2 # work out whether the number of digits is odd

    #assume all numbers to be a palindrome
    palindrome = True

    #Considering the numbers with an odd nuber of digits:
    if remainder == 1:
        midpoint_index = int(number_length /2) -1

        for index in range(0,midpoint_index+1): #loop until the midpoint index

            if number_str[index] == number_str[(-index)-1]:
                continue
            else:

                palindrome = False#
                break

    #Consdiering the numbers with an even number of digits:
    if remainder == 0:
        #we are going to loop until the upper midpoint
        upper_midpoint_index = int(number_length / 2)
        for index in range(0,upper_midpoint_index):
            if number_str[index] == number_str[(-index)-1]:
                continue
            else:

                palindrome = False
                break
    return palindrome

def reverse_number(number):
    number_str = str(number)
    number_length = len(number_str)
    reverse_number = ""
    for index in range(number_length - 1, -1, -1):
        reverse_number += number_str[index]
    return int(reverse_number)


counter = 0
for number in range(1, 10000):
    number_iterations = 0
    temp = number
    while number_iterations != 50:
        temp += reverse_number(temp)
        if palindrome_number(temp) == True:
            break
        number_iterations += 1
    else:
        counter += 1

print(counter)




print(counter)
